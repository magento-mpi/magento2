<?php
/**
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\CatalogSearch\Model\Layer\Filter;

/**
 * Layer price filter based on Search API
 *
 */
class Price extends \Magento\Catalog\Model\Layer\Filter\Price
{
    /**
     * Get data array for building attribute filter items
     *
     * @return array
     */
    protected function _getItemsData()
    {
        $attribute = $this->getAttributeModel();
        $this->_requestVar = $attribute->getAttributeCode();

        $productCollection = $this->getLayer()->getProductCollection();
        $facets = $productCollection->getFacetedData($attribute->getAttributeCode());

        $data = [];
        if (!empty($facets)) {
            foreach ($facets as $key => $aggregation) {
                $count = $aggregation['count'];
                list($from, $to) = explode('_', $key);
                if ($from == '*') {
                    $from = '';
                }
                if ($to== '*') {
                    $to= '';
                }
                if (empty($from) and empty($to)) {
                    continue;
                }

                $label = $this->_renderRangeLabel(
                    empty($from) ? 0 : $from * $this->getCurrencyRate(),
                    empty($to) ? $to: $to* $this->getCurrencyRate()
                );
                $value =  $from . '-' . $to . $this->_getAdditionalRequestData();


                $data[] = [
                    'label' => $label,
                    'value' => $value,
                    'count' => $count,
                    'from' => $from,
                    'to' => $to
                ];
            }

        }

        return $data;
    }

    /**
     * Prepare price range to be added to facet conditions
     *
     * @param string|float $from
     * @param string|float $to
     * @return array
     */
    protected function _prepareFacetRange($from, $to)
    {
        if (empty($from)) {
            $from = '*';
        }

        if ($to === '') {
            $to = '*';
        } else {
            if ($to == $from || $to == 0 && $from == '*') {
                $to = $this->_prepareFacetedValue($to, false);
            } else {
                $to = $this->_prepareFacetedValue($to);
            }
        }

        if ($from != '*') {
            $from = $this->_prepareFacetedValue($from);
        }
        return ['from' => $from, 'to' => $to];
    }

    /**
     * Add params to faceted search generated by algorithm
     *
     * @return void
     */
    protected function _addCalculatedFacetCondition()
    {
        $priceFacets = [];
        $this->_facets = [];
        foreach ($this->_getSeparators() as $separator) {
            $facetedRange = $this->_prepareFacetRange($separator[0], $from);
            $this->_facets[$facetedRange['from'] . '_' . $facetedRange['to']] = $separator;
            $priceFacets[] = $facetedRange;
        }
        $this->getLayer()->getProductCollection()->setFacetCondition($this->_getFilterField(), $priceFacets);
    }
}
