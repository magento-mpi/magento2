<?php
/**
 * {license_notice}
 *
 * @category    design
 * @package     default_default
 * @copyright   {copyright}
 * @license     {license_link}
 */
/* @var $coreHelper \Magento\Core\Helper\Data */
$coreHelper = $this->helper('Magento\Core\Helper\Data');
?>

<div class="fieldset-wrapper custom-options attribute-custom-options">
    <div class="fieldset-wrapper-title">
        <span class="title"><?php echo $this->getFormTitle() ?></span>
        <div class="actions"><?php echo $this->getAddButtonHtml() ?></div>
    </div>

    <?php echo $this->getTemplatesHtml() ?>

    <div id="<?php echo $this->getFieldPrefix() ?>_attribute_container"></div>

    <script type="text/javascript">
    //<![CDATA[
    var attributeTemplate =
        '<div class="fieldset-wrapper opened option-box collapsable-wrapper" id="{{prefix}}_option_{{id}}">'+
            '<div class="fieldset-wrapper-title">'+
                '<strong class="title" data-toggle="collapse" data-target="#{{prefix}}_option_{{id}}-content"><span>New Attribute</span></strong>'+
                '<div class="actions">'+ <?php echo $this->helper('Magento\Core\Helper\Data')->jsonEncode($this->getDeleteButtonHtml()) ?> +'</div>'+
            '</div>'+
            '<div class="fieldset-wrapper-content in collapse" id="{{prefix}}_option_{{id}}-content">'+
                '<fieldset class="fieldset">'+
                    '<table id="{{prefix}}_attribute_{{id}}" class="data-table table-fieldset-alt">'+
                        '<thead>'+
                            '<tr>'+
                                '<th><?php echo __('Code') ?> <span class="required">*</span></th>'+
                                '<th><?php echo __('Input Type') ?> <span class="required">*</span></th>'+
                                '<th><?php echo __('Attribute Group') ?> <span class="required">*</span></th>'+
                                '<th><?php echo __('Label') ?> <span class="required">*</span></th>'+
                                '<th><?php echo __('Is Required') ?></th>'+
                                '<th><?php echo __('Sort Order') ?></th>'+
                            '</tr>'+
                        '</thead>'+
                        '<tbody>'+
                            '<tr>'+
                                '<td><input type="text" class="required-entry validate-code input-text global-scope attribute-code" id="{{prefix}}_attribute_{{id}}_code" name="attributes[{{prefix}}][{{id}}][code]" value="{{code}}"></td>'+
                                '<td>' + <?php echo $coreHelper->jsonEncode($this->getTypeSelectHtml()); ?> + '</td>'+
                                '<td>' + <?php echo $coreHelper->jsonEncode($this->getGroupSelectHtml()); ?> + '</td>'+
                                '<td><input type="text" class="required-entry input-text" id="{{prefix}}_attribute_{{id}}_label" name="attributes[{{prefix}}][{{id}}][label]" value="{{label}}">{{checkbox_scope}}</td>'+
                                '<td><?php echo $this->getRequiredSelectHtml() ?></td>'+
                                '<td><input type="text" class="input-text global-scope" id="{{prefix}}_attribute_{{id}}_sort_order" name="attributes[{{prefix}}][{{id}}][sort_order]" value="{{sort_order}}"></td>'+
                            '</tr>'+
                        '</tbody>'+
                    '</table>'+

                    '<input type="hidden" id="{{prefix}}_attribute_{{id}}_is_deleted" name="attributes[{{prefix}}][{{id}}][is_deleted]">'+
                    '<input type="hidden" id="{{prefix}}_attribute_{{id}}_hidden_type" name="attributes[{{prefix}}][{{id}}][type]" value="{{type}}">'+
                    '<input class="hidden-code" type="hidden" id="{{prefix}}_attribute_{{id}}_hidden_code" name="attributes[{{prefix}}][{{id}}][code]" value="{{code}}" disabled="disabled">'+
                    '<input type="hidden" id="{{prefix}}_attribute_{{id}}_hidden_group" name="attributes[{{prefix}}][{{id}}][group]" value="{{group}}" disabled="disabled">'+

                    '<div class="giftregistry-custom-attributes"  id="{{prefix}}_option_ext_{{id}}">'+
                        '<div class="field field-searcheable">'+
                            '<label class="label" for=""><span><?php echo __('Is Searcheable') ?></span></label>'+
                            '<div class="control"><?php echo $this->getSearcheableSelectHtml() ?></div>'+
                        '</div>'+
                        '<div class="field field-listed">'+
                            '<label class="label" for=""><span><?php echo __('Is Listed') ?></span></label>'+
                            '<div class="control"><?php echo $this->getListedSelectHtml() ?></div>'+
                        '</div>'+
                    '</div>'+
                    '<div id="{{prefix}}_attribute_{{id}}_options"></div>'+

                '</fieldset>'+
            '</div>'+
        '</div>';

    var customAttribute = {
        templateSyntax : /(^|.|\r|\n)({{(\w+)}})/,
        types : <?php echo $this->getStaticTypes()->toJson() ?>,
        templateText : attributeTemplate,
        attributeId : 0,
        prefix : '<?php echo $this->getFieldPrefix() ?>',
        usedMessage : '<?php echo __('We found an attribute with this static input type already in the gift registry type. Please select a different input type.') ?>',
        add : function(data) {
            if(data.id == undefined){
                data = {};
                this.attributeId++;
                data.id  = this.attributeId;
            } else {
                this.attributeId = data.id;
            }
            data.prefix = this.prefix;

            this.template = new Template(this.templateText, this.templateSyntax);
            Element.insert($(this.prefix+'_attribute_container'), {'after':this.template.evaluate(data)});

            jQuery('.collapse').collapsable();

            if (data.type) {
                var is_static = 0;
                var type = data.type;
                if (this.types[data.code]) {
                    type += ':' + data.code;
                    is_static = 1;
                }
                $A($(this.prefix+'_attribute_'+data.id+'_type').options).each(function(option){
                    if (option.value==type || (is_static && option.value.include(type))) option.selected = true;
                });
            }
            if (data.group) {
                $A($(this.prefix+'_attribute_'+data.id+'_group').options).each(function(option){
                    if (option.value==data.group) option.selected = true;
                });
            }
            if (data.is_required) {
                $A($(this.prefix+'_attribute_'+data.id+'_is_required').options).each(function(option){
                    if (option.value==data.is_required) option.selected = true;
                });
            }
            if (data.is_searcheable) {
                $A($(this.prefix+'_attribute_'+data.id+'_is_searcheable').options).each(function(option){
                    if (option.value==data.is_searcheable) option.selected = true;
                });
            }
            if (data.is_listed) {
                $A($(this.prefix+'_attribute_'+data.id+'_is_listed').options).each(function(option){
                    if (option.value==data.is_listed) option.selected = true;
                });
            }
            if (data.checkbox_scope) {
                if ($(this.prefix+'_attribute_'+data.id+'_label') && data.label_disabled) {
                    $(this.prefix+'_attribute_'+data.id+'_label').disable();
                }
            }

            var template = this.getOptionTemplate(data.type);
            this.checkStaticType(null, $(this.prefix+'_attribute_'+data.id+'_type'));
            if (template) {
                this.insertOptionTemplate(template, data);
                if (data.type == 'select') {
                    if (data.items) {
                        data.items.each(function(value) {
                            selectOptionType.add(value);
                        });
                    }
                    selectOptionType.bindAddButton();
                }
                if (data.type == 'date') {
                    selectDateType.add(data);
                }
                if (data.type == 'country') {
                    selectCountryType.add(data);
                }
            }
            this.bindRemoveButtons();
            this.bindSelectInputType();
        },
        addParams : function(element, type){
            var template = this.getOptionTemplate(type);
            data = {};
            data.id = element.id.sub(this.prefix+'_attribute_', '').sub('_type', '');
            data.type = type;
            data.prefix = this.prefix;

            this.clearParams(element);
            this.insertOptionTemplate(template, data);
            if (type == 'select') {
                selectOptionType.bindAddButton();
            }
        },
        clearParams : function(element) {
            var container = element.id.sub('attribute', 'option').sub('_type', '');
            $$('#'+container+' .type-options').each(function(el){
                $(el.id).remove();
            });
        },
        remove : function(event){
            var element = $(Event.findElement(event, 'div.fieldset-wrapper'));
            if (element) {
                fieldId = element.id.sub(this.prefix+'_option_','');
                $(this.prefix+'_attribute_'+fieldId+'_is_deleted').value = '1';

                element.addClassName('no-display');
                element.addClassName('ignore-validate');
                element.hide();
            }
        },
        bindRemoveButtons : function(){
            var buttons = $$('div.attribute-custom-options .delete-attribute-option');
            for(var i=0;i<buttons.length;i++){
                if(!$(buttons[i]).binded){
                    $(buttons[i]).binded = true;
                    Event.observe(buttons[i], 'click', this.remove.bind(this));
                }
            }
            var inputs = $$('div.attribute-custom-options button', 'div.attribute-custom-options input', 'div.attribute-custom-options select');
            inputs.each(function(el) { Event.observe(el, 'change', el.setHasChanges.bind(el));  })
        },
        bindScopeCheckbox : function(){
            var checkboxes = $$('.attribute-option-scope-checkbox');
            for (var i=0;i<checkboxes.length;i++) {
                if (!$(checkboxes[i]).binded) {
                    $(checkboxes[i]).binded = true;
                    Event.observe(checkboxes[i], 'click', this.addScope.bind(this));
                }
            }
        },
        bindSelectInputType : function(){
            var types = $$('.attribute-type');
            for(var i=0;i<types.length;i++){
                if(!$(types[i]).binded){
                    $(types[i]).binded = true;
                    Event.observe(types[i], 'change', this.checkStaticType.bind(this));
                }
            }
        },
        addScope : function(event){
            var element = $(Event.element(event));
            el = $(element.id.sub('_use_default', ''));
            if (el.disabled) el.enable();
            else el.disable();
        },
        changeScopeInputs : function(scope, mode){
            if (scope) {
                $$('.global-scope').each(function(el){el.disable()});
                $$('.hidden-code').each(function(el){el.enable()});
                $$('.scope-item').each(function(el){el.hide()});
            }
        },
        checkStaticType : function(event, element){
            if (element == undefined) {
                element = $(Event.findElement(event, 'select'));
            }

            var parts = element.value.split(':');
            var type = parts[0];
            var code = (parts[1] != undefined) ? parts[1] : 0;
            var group = (parts[2] != undefined) ? parts[2] : 0;
            var alreadyUsed = false;

            var codeInput = $(element.id.sub('_type','_code'));
            var hiddenCodeInput = $(element.id.sub('_type','_hidden_code'));
            var groupInput = $(element.id.sub('_type','_group'));
            var hiddenGroupInput = $(element.id.sub('_type','_hidden_group'));

            $$('.attribute-type').each(function(el){
                var optionBox = $(el).up('.option-box');
                if (el.id != element.id && el.value == element.value && code && !optionBox.hasClassName('no-display')) {
                    alreadyUsed = true;
                }
            });

            if (alreadyUsed) {
                alert(this.usedMessage);
                element.selectedIndex = 0;
                this.clearParams(element);
                this.hideExtBox(element);
                codeInput.enable();
                groupInput.enable();
                return;
            }

            var hiddenTypeInput = $(element.id.sub('_type','_hidden_type'));
            hiddenTypeInput.value = type;

            if (code) {
                codeInput.value = code;
                codeInput.disable();
                hiddenCodeInput.value = code;
                hiddenCodeInput.enable();
                this.showExtBox(element);
            } else {
                codeInput.enable();
                hiddenCodeInput.disable();
                this.hideExtBox(element);
            }

            if (group) {
                $A(groupInput.options).each(function(option){
                    if (option.value==group && option.selected==false) {
                        option.selected = true;
                    }
                });
                groupInput.disable();
                hiddenGroupInput.value = group;
                hiddenGroupInput.enable();
            } else {
                groupInput.enable();
                hiddenGroupInput.disable();
            }
            customAttribute.addParams(element, type);
        },
        showExtBox : function(element){
            var extBox = $(element.id.sub('_type','').sub('attribute','option_ext'));
            extBox.show();
            $$('div#'+extBox.id+' .select').each(function(el){el.enable()});
        },
        hideExtBox : function(element){
            var extBox = $(element.id.sub('_type','').sub('attribute','option_ext'));
            extBox.hide();
            $$('div#'+extBox.id+' .select').each(function(el){el.disable()});
        },
        getOptionTemplate : function(type){
            var template;
            switch(type){
                case 'select':
                    template = OptionTemplateSelect;
                    break;
                case 'date':
                    template = OptionTemplateDate;
                    break;
                case 'country':
                    template = OptionTemplateCountry;
                    break;
                default:
                    template = '';
                    break;
            }
            return template;
        },
        insertOptionTemplate : function(template, data){
            var id = data.prefix+'_'+data.id+'_type_'+data.type;
            if (!$(id)) {
                var output = '<div id="'+id+'" class="type-options">'+template+'</div>';
                this.secondTemplate = new Template(output, this.templateSyntax);

                element='registry_attribute_'+data.id+'_options';
                Element.insert(element, {'after':this.secondTemplate.evaluate(data)});
            }
        }
    }

    if($('<?php echo $this->getAddButtonId() ?>')){
        Event.observe('<?php echo $this->getAddButtonId() ?>', 'click', customAttribute.add.bind(customAttribute));
    }

    <?php foreach ($this->getAttributeValues() as $_value): ?>
        customAttribute.add(<?php echo $_value->toJson() ?>);
    <?php endforeach; ?>

    customAttribute.bindScopeCheckbox();
    customAttribute.changeScopeInputs(<?php echo $this->getTypeStoreId() ?>);

    head.js('<?php echo $this->getViewFileUrl('Magento_GiftRegistry::edit/validation-rules.js'); ?>');

    function bindActiveRegistryTab(event, ui) {
        var anchor = jQuery(ui.newTab).find('a');
        if ($('store_switcher') && anchor.length && anchor.prop('name')) {
            $('store_switcher').switchParams = 'active_tab/' + anchor.prop('name') + '/';
        }
    }
    jQuery(document).on('tabsactivate', bindActiveRegistryTab);
    //]]>
    </script>
</div>
