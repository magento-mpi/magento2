<?php
/**
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\CatalogUrlRewrite\Model\Category\Plugin;

use Magento\UrlRewrite\Model\StorageInterface;
// TODO: structure layer knows about service layer(and version) (@TODO: UrlRewrite)
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;
use Magento\CatalogUrlRewrite\Model\ProductUrlRewriteGenerator;
use Magento\CatalogUrlRewrite\Model\Category\ProductFactory;
use Magento\UrlRewrite\Service\V1\Data\Filter;
use Magento\UrlRewrite\Service\V1\UrlMatcherInterface;
use Magento\UrlRewrite\Service\V1\Data\FilterFactory;

class Storage
{
    /** @var \Magento\UrlRewrite\Service\V1\UrlMatcherInterface */
    protected $urlMatcher;

    /** @var \Magento\UrlRewrite\Service\V1\Data\FilterFactory */
    protected $filterFactory;

    /** @var ProductFactory */
    protected $productFactory;

    /**
     * @param \Magento\UrlRewrite\Service\V1\UrlMatcherInterface $urlMatcher
     * @param ProductFactory $productFactory
     * @param \Magento\UrlRewrite\Service\V1\Data\FilterFactory $filterFactory
     */
    public function __construct(
        UrlMatcherInterface $urlMatcher,
        ProductFactory $productFactory,
        FilterFactory $filterFactory
    ) {
        $this->urlMatcher = $urlMatcher;
        $this->filterFactory = $filterFactory;
        $this->productFactory = $productFactory;
    }

    /**
     * @param \Magento\UrlRewrite\Model\StorageInterface $object
     * @param callable $proceed
     * @param array $urls
     * @return void
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function aroundAddMultiple(StorageInterface $object, \Closure $proceed, array $urls)
    {
        $proceed($urls);
        $urls = $this->filterUrls($urls);
        if ($urls) {
            $records = $this->urlMatcher->findAllByFilter($this->buildFilterFromUrls($urls));
            $data = [];
            foreach ($records as $record) {
                $metadata = $record->getMetadata();
                if (empty($metadata['category_id'])) {
                    continue;
                }
                $data[] = [
                    'url_rewrite_id' => $record->getUrlRewriteId(),
                    'category_id' => $metadata['category_id'],
                    'product_id' => $record->getEntityId()
                ];
            }
            if ($data) {
                $this->productFactory->create()->getResource()->saveMultiple($data);
            }
        }
    }

    /**
     * @param \Magento\UrlRewrite\Model\StorageInterface $object
     * @param \Magento\UrlRewrite\Service\V1\Data\Filter $filter
     * @return void
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function beforeDeleteByFilter(StorageInterface $object, Filter $filter)
    {
        $data = $filter->getData();
        $data[UrlRewrite::ENTITY_TYPE] = ProductUrlRewriteGenerator::ENTITY_TYPE;
        $data[UrlRewrite::IS_AUTOGENERATED] = 1;
        $records = $this->urlMatcher->findAllByFilter($this->filterFactory->create(['data' => $data]));
        foreach ($records as $record) {
            $data[] = $record->getUrlRewriteId();
        }
        if ($data) {
            $this->productFactory->create()->getResource()->removeMultiple($data);
        }
    }

    /**
     * Build filter
     *
     * @param \Magento\UrlRewrite\Service\V1\Data\UrlRewrite[] $urls
     * @return \Magento\UrlRewrite\Service\V1\Data\Filter
     */
    protected function buildFilterFromUrls($urls)
    {
        $data = [];
        $uniqueKeys = [UrlRewrite::REQUEST_PATH, UrlRewrite::STORE_ID];
        foreach ($urls as $url) {
            foreach ($uniqueKeys as $key) {
                $fieldValue = $url->getByKey($key);

                if (!isset($data[$key]) || !in_array($fieldValue, $data[$key])) {
                    $data[$key][] = $fieldValue;
                }
            }
        }
        $data[UrlRewrite::IS_AUTOGENERATED] = 1;
        return $this->filterFactory->create(['data' => $data]);
    }

    /**
     * @param \Magento\UrlRewrite\Service\V1\Data\UrlRewrite[] $urls
     * @return array
     */
    protected function filterUrls(array $urls)
    {
        $params = [];
        /** @var UrlRewrite $url */
        foreach ($urls as $url) {
            if ($url->getEntityType() == ProductUrlRewriteGenerator::ENTITY_TYPE) {
                $params[] = $url;
            }
        }

        return $params;
    }
}
