<?php
/**
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\CatalogUrlRewrite\Model\Product;

use Magento\Catalog\Model\Category;
use Magento\Catalog\Model\Product;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;
use Magento\UrlRewrite\Model\OptionProvider;
use Magento\CatalogUrlRewrite\Model\CategoryRegistry;
use Magento\UrlRewrite\Service\V1\Data\FilterFactory;
use Magento\UrlRewrite\Service\V1\UrlMatcherInterface;
use Magento\CatalogUrlRewrite\Model\ProductUrlRewriteGenerator;
use Magento\CatalogUrlRewrite\Model\ProductUrlPathGenerator;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite\Converter;

class CurrentUrlRewriteGenerator
{
    /** @var \Magento\UrlRewrite\Service\V1\Data\FilterFactory */
    protected $filterFactory;

    /** @var \Magento\UrlRewrite\Service\V1\UrlMatcherInterface */
    protected $urlMatcher;

    /** @var \Magento\UrlRewrite\Service\V1\Data\UrlRewrite\Converter */
    protected $converter;

    /** @var \Magento\Catalog\Model\Product */
    protected $product;

    /** @var \Magento\CatalogUrlRewrite\Model\ProductUrlPathGenerator */
    protected $productUrlPathGenerator;

    /** @var \Magento\CatalogUrlRewrite\Model\CategoryRegistry */
    protected $categoryRegistry;

    /**
     * @param \Magento\UrlRewrite\Service\V1\Data\FilterFactory $filterFactory
     * @param \Magento\UrlRewrite\Service\V1\UrlMatcherInterface $urlMatcher
     * @param \Magento\CatalogUrlRewrite\Model\ProductUrlPathGenerator $productUrlPathGenerator
     * @param \Magento\UrlRewrite\Service\V1\Data\UrlRewrite\Converter $converter
     */
    public function __construct(
        FilterFactory $filterFactory,
        UrlMatcherInterface $urlMatcher,
        ProductUrlPathGenerator $productUrlPathGenerator,
        Converter $converter
    ) {
        $this->filterFactory = $filterFactory;
        $this->urlMatcher = $urlMatcher;
        $this->productUrlPathGenerator = $productUrlPathGenerator;
        $this->converter = $converter;
    }

    /**
     * Generate list based on current rewrites
     *
     * @param int $storeId
     * @param \Magento\Catalog\Model\Product $product
     * @param \Magento\CatalogUrlRewrite\Model\CategoryRegistry $categoryRegistry
     * @return array
     */
    public function generate($storeId, Product $product, CategoryRegistry $categoryRegistry)
    {
        $this->product = $product;
        $this->categoryRegistry = $categoryRegistry;
        /** @var \Magento\UrlRewrite\Service\V1\Data\Filter $filter */
        $filter = $this->filterFactory->create();
        $filter->setStoreId($storeId)
            ->setEntityId($this->product->getId())
            ->setEntityType(ProductUrlRewriteGenerator::ENTITY_TYPE);

        $urls = [];
        foreach ($this->urlMatcher->findAllByFilter($filter) as $url) {
            $urls = array_merge(
                $urls,
                $url->getIsAutogenerated()
                    ? $this->generateForAutogenerated($url, $storeId)
                    : $this->generateForCustom($url, $storeId)
            );
        }
        return $urls;
    }

    /**
     * @param \Magento\UrlRewrite\Service\V1\Data\UrlRewrite $url
     * @param int $storeId
     * @return array
     */
    protected function generateForAutogenerated($url, $storeId)
    {
        $urls = [];
        if ($this->product->getData('save_rewrites_history')) {
            $category = $this->retrieveCategoryFromMetadata($url);
            $targetPath = $this->productUrlPathGenerator->getUrlPathWithSuffix($this->product, $storeId, $category);
            if ($url->getRequestPath() !== $targetPath) {
                $urls[] = $this->createUrlRewrite(
                    $url->getStoreId(),
                    $url->getRequestPath(),
                    $targetPath,
                    OptionProvider::PERMANENT,
                    false,
                    $this->buildMetadataForCategory($category, $url)
                );
            }
        }
        return $urls;
    }

    /**
     * @param \Magento\UrlRewrite\Service\V1\Data\UrlRewrite $url
     * @param int $storeId
     * @return array
     */
    protected function generateForCustom($url, $storeId)
    {
        $urls = [];
        $category = $this->retrieveCategoryFromMetadata($url);
        $targetPath = $this->isGeneratedByUser($url) || !$url->getRedirectType()
            ? $url->getTargetPath()
            : $this->productUrlPathGenerator->getUrlPathWithSuffix($this->product, $storeId, $category);
        if ($url->getRequestPath() !== $targetPath) {
            $urls[] = $this->createUrlRewrite($storeId, $url->getRequestPath(), $targetPath, $url->getRedirectType(),
                false, $this->buildMetadataForCategory($category, $url));
        }
        return $urls;
    }

    /**
     * @param \Magento\UrlRewrite\Service\V1\Data\UrlRewrite $url
     * @return \Magento\Catalog\Model\Category|null
     */
    protected function retrieveCategoryFromMetadata($url)
    {
        $metadata = $url->getMetadata();
        if (isset($metadata['category_id'])) {
            return $this->categoryRegistry->get($metadata['category_id']);
        }
        return null;
    }

    /**
     * @param \Magento\UrlRewrite\Service\V1\Data\UrlRewrite $url
     * @return bool
     */
    protected function isGeneratedByUser($url)
    {
        $metadata = $url->getMetadata();
        return !empty($metadata['is_user_generated']);
    }

    /**
     * @param Category $category
     * @param \Magento\UrlRewrite\Service\V1\Data\UrlRewrite $url
     * @return string|null
     */
    protected function buildMetadataForCategory(Category $category = null, $url = null)
    {
        $metadata = $url ? $url->getMetadata() : [];
        if ($category) {
            $metadata['category_id'] = $category->getId();
        }
        return $metadata ? serialize($metadata) : null;
    }

    /**
     * Create url rewrite object
     *
     * @param int $storeId
     * @param string $requestPath
     * @param string $targetPath
     * @param bool $isAutoGenerated
     * @param int $redirectType
     * @param string|null $metadata
     * @return \Magento\UrlRewrite\Service\V1\Data\UrlRewrite
     */
    protected function createUrlRewrite(
        $storeId,
        $requestPath,
        $targetPath,
        $redirectType = 0,
        $isAutoGenerated = true,
        $metadata = null
    ) {
        return $this->converter->convertArrayToObject(
            [
                UrlRewrite::ENTITY_TYPE => ProductUrlRewriteGenerator::ENTITY_TYPE,
                UrlRewrite::ENTITY_ID => $this->product->getId(),
                UrlRewrite::STORE_ID => $storeId,
                UrlRewrite::REQUEST_PATH => $requestPath,
                UrlRewrite::TARGET_PATH => $targetPath,
                UrlRewrite::REDIRECT_TYPE => $redirectType,
                UrlRewrite::IS_AUTOGENERATED => $isAutoGenerated,
                UrlRewrite::METADATA => $metadata,
            ]
        );
    }
}
