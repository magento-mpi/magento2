<?xml version="1.0" encoding="utf-8"?>
<!--
/**
 * Apache Ant's build file for core development functional tests
 *
 * {license_notice}
 *
 * @copyright  {copyright}
 * @license    {license_link}
 */
-->
<project name="Core Development Functional Tests" basedir="../../../../" default="run-ee">
    <import file="../util.xml"/>

    <target name="run-ee" depends="_server_info" description="Run functional tests on EE">
        <antcall>
            <target name="_enterprise_edition"/>
            <target name="run"/>
        </antcall>
    </target>
    <target name="run-ce" depends="_server_info" description="Run functional tests on CE">
        <antcall>
            <target name="_community_edition"/>
            <target name="run"/>
        </antcall>
    </target>

    <target name="run" depends="_server_info" description="Deploy multiple Magento instances and run functional tests on each of them simultaneously">
        <script language="javascript"><![CDATA[
            if (project.getProperty('env.bamboo_desired_agent')
                && project.getProperty('env.bamboo_desired_agent') != ''
                && project.getProperty('env.agent_name')
                && project.getProperty('env.bamboo_desired_agent') != project.getProperty('env.agent_name')
            ) {
                project.setProperty('error_message', 'This plan should be executed on agent "'
                    + project.getProperty('env.bamboo_desired_agent') + '", while currently it is executed on "'
                    + project.getProperty('env.agent_name') + '".');
            }
        ]]></script>
        <fail if="error_message" message="${error_message}"/>

        <fail if="max_instances" message="'max_instances' must be not set explicitly, use 'instance_count' instead."/>
        <script language="javascript"><![CDATA[
            var errorMessages = [];

            var variables = {
                build_customization_dir: '',
                db_host: '',
                db_name_prefix: '',
                db_user: '',
                db_password: '',
                deploy_directory: '',
                http_host: ' (e.g. http://myhost.com/mypath/)',
                https_host: ' (e.g. https://myhost.com/mypath/)',
                instance_count: '',
                selenium_browser: ' (e.g. firefox, googlechrome etc; see server.yml.dist)',
                selenium_host: '',
                selenium_port: '',
                selenium_timeout: '',
            };
            for (var name in variables) {
                if (project.getProperty('env.' + name) === null) {
                    errorMessages.push('Environment variable "' + name + '" must be defined' + variables[name] + '.');
                }
            }

            variables = {
                executer_options: '',
                instance_count: '',
                tests_executed: ' (relative path or few paths combined into one mask, for instance testsuite/{dir1/subdir1/*name1,dir2/*subdir2*,dir3/name3*})',
            };
            for (name in variables) {
                if (project.getProperty('env.bamboo_' + name) === null) {
                    errorMessages.push('Bamboo variable "' + name + '" must be defined' + variables[name] + '.');
                }
            }

            if (errorMessages.length > 0) {
                project.setProperty('error_message', errorMessages.join('\n'));
            } else {
                project.setProperty('max_instances', Math.min(project.getProperty('env.instance_count'),
                    project.getProperty('env.bamboo_instance_count')
                ));
                var echo = project.createTask('echo');
                echo.setMessage('Maximum ' + project.getProperty('env.instance_count')
                    + ' instances supported by environment, '
                    + project.getProperty('env.bamboo_instance_count') + ' expected by plan.');
                echo.execute();
            }
        ]]></script>

        <fail if="error_message" message="${error_message}"/>

        <property name="dir.build_directory" location="${env.deploy_directory}/${env.build.key}"/>
        <delete dir="${dir.build_directory}"/>

        <copy file="${basedir}/${env.build_customization_dir}/composer.json" failonerror="true" overwrite="true"
              tofile="${basedir}/dev/tests/functional/composer.json"/>

        <condition property="env.bamboo_mtf_repository" value="git://github.scm.corp.ebay.com/mtf/mtf.git">
            <not><isset property="env.bamboo_mtf_repository"/></not>
        </condition>
        <condition property="env.bamboo_mtf_branch" value="develop">
            <not><isset property="env.bamboo_mtf_branch"/></not>
        </condition>
        <replace file="${basedir}/dev/tests/functional/composer.json">
            <replacefilter token="{{mtf_repository}}" value="${env.bamboo_mtf_repository}"/>
            <replacefilter token="{{mtf_branch}}" value="${env.bamboo_mtf_branch}"/>
        </replace>

        <antcall target="_composer_install">
            <param name="product_root_dir" value="${basedir}"/>
        </antcall>
        <antcall target="_composer_install_dir">
            <param name="target_composer_dir" value="${basedir}/dev/tests/functional"/>
        </antcall>

        <script language="javascript"><![CDATA[
            var antcall = project.createTask('antcall');
            antcall.setTarget('deploy-magento-instance');
            antcall.setInheritAll(true);
            var param = antcall.createParam();
            param.setName('instanceIndex');
            param.setValue(0);
            antcall.execute();

            var maxInstances = project.getProperty('max_instances');
            if (maxInstances > 1) {
                var parallel = project.createTask('parallel');
                for (var instanceIndex = 1; instanceIndex < maxInstances; instanceIndex++) {
                    var antcall = project.createTask('antcall');
                    antcall.setTarget('deploy-magento-instance');
                    antcall.setInheritAll(true);
                    var param = antcall.createParam();
                    param.setName('instanceIndex');
                    param.setValue(instanceIndex);
                    parallel.addTask(antcall);
                }
                parallel.execute();
            }
        ]]></script>

        <condition property="env.bamboo_module_filter" value="">
            <not><isset property="env.bamboo_module_filter"/></not>
        </condition>

        <exec executable="vendor/phpunit/phpunit/phpunit" failonerror="true" dir="${dir.build_directory}/instance-0/dev/tests/functional/">
            <arg line="--log-junit ${basedir}/test-cases-report.xml
                --bootstrap config/bootstrap.php
                 ${env.bamboo_executer_options}
                "/>
            <env key="module_filter" value="${env.bamboo_module_filter}"/>
        </exec>
    </target>

    <target name="deploy-magento-instance">
        <copy todir="${dir.build_directory}/instance-${instanceIndex}" failonerror="true">
            <fileset dir="${basedir}"/>
        </copy>

        <mkdir dir="${dir.build_directory}/instance-${instanceIndex}/dev/tests/functional/var/logs"/>
        <mkdir dir="${dir.build_directory}/instance-${instanceIndex}/dev/tests/functional/var/screenshots"/>
        <copy file="${basedir}/${env.build_customization_dir}/phpunit.xml" failonerror="true" overwrite="true"
              tofile="${dir.build_directory}/instance-${instanceIndex}/dev/tests/functional/phpunit.xml"/>
        <copy todir="${dir.build_directory}/instance-${instanceIndex}/dev/tests/functional/config/" failonerror="true" overwrite="true">
            <fileset dir="${basedir}/${env.build_customization_dir}/config/"/>
        </copy>

        <antcall target="_installation_requirements" inheritAll="true">
            <param name="product_root_dir" value="${dir.build_directory}/instance-${instanceIndex}"/>
        </antcall>

        <chmod perm="a+w">
            <dirset file="${dir.build_directory}/instance-${instanceIndex}"/>
        </chmod>

        <chmod perm="755" file="${dir.build_directory}/instance-${instanceIndex}/dev/tests/functional/vendor/phpunit/phpunit/phpunit"/>

        <replace file="${dir.build_directory}/instance-${instanceIndex}/dev/tests/functional/config/install.php">
            <replacefilter token="{{db_model}}" value="${env.db_model}"/>
            <replacefilter token="{{db_host}}" value="${env.db_host}"/>
            <replacefilter token="{{db_name}}" value="${env.db_name_prefix}${instanceIndex}"/>
            <replacefilter token="{{db_user}}" value="${env.db_user}"/>
            <replacefilter token="{{db_password}}" value="${env.db_password}"/>
            <replacefilter token="{{url}}" value="${env.http_host}${env.build.key}/instance-${instanceIndex}"/>
            <replacefilter token="{{secure_url}}" value="${env.http_host}${env.build.key}/instance-${instanceIndex}"/>
        </replace>

        <condition property="env.bamboo_tests_configuration" value="basic">
            <not><isset property="env.bamboo_tests_configuration"/></not>
        </condition>

        <replace file="${dir.build_directory}/instance-${instanceIndex}/dev/tests/functional/config/server.yml.dist">
            <replacefilter token="{{selenium_host}}" value="${env.selenium_host}"/>
            <replacefilter token="{{selenium_port}}" value="${env.selenium_port}"/>
            <replacefilter token="{{selenium_timeout}}" value="${env.selenium_timeout}"/>
            <replacefilter token="{{selenium_browser}}" value="${env.selenium_browser}"/>
        </replace>

        <replace file="${dir.build_directory}/instance-${instanceIndex}/dev/tests/functional/phpunit.xml">
            <replacefilter token="{{admin_url}}" value="${env.http_host}${env.build.key}/instance-${instanceIndex}/backend/"/>
            <replacefilter token="{{url}}" value="${env.http_host}${env.build.key}/instance-${instanceIndex}"/>
            <replacefilter token="{{tests_configuration}}" value="${env.bamboo_tests_configuration}" />
        </replace>

        <script language="javascript"><![CDATA[
            var currentInstance = project.getProperty('instanceIndex');
            if (currentInstance > 0) {
                self.project.executeTarget('_import_mysql_dump');
                self.project.executeTarget('_copy_local_xml');
                self.project.executeTarget('_update_db');
            }
        ]]></script>

        <!-- Adds the parallelized instances to the phpunit.xml -->
        <script language="javascript"><![CDATA[
            importClass(java.io.File);

            var file = project.getProperty('dir.build_directory') + '/instance-' + project.getProperty('instanceIndex')
                + '/dev/tests/functional/phpunit.xml';

            var replace = project.createTask('replace');
            replace.setFile(new File(file));

            var maxInstances = project.getProperty('max_instances');

            var replaceText = '<env name="app_instances" value="' + maxInstances + '"/>' + "\n";
            for (var instances = 0; instances < maxInstances; instances++) {
                var backendUrlValue = project.getProperty('env.http_host') + project.getProperty('env.build.key')
                    + "/instance-" + instances + "/backend/";
                var frontendUrlValue = project.getProperty('env.http_host') + project.getProperty('env.build.key')
                    + "/instance-" + instances;

                var instanceText = '        <env name="app_frontend_url_' + instances + '" value="' + frontendUrlValue + '/"/>' + "\n" +
                    '        <env name="app_backend_url_' + instances + '" value="' + backendUrlValue + '"/>' + "\n";
                replaceText += instanceText;
            }

            var replaceFilter = replace.createReplacefilter();
            replaceFilter.setToken('<!--{{parallel_instances}}-->');
            replaceFilter.setValue(replaceText);

            replace.execute();
        ]]></script>

        <exec executable="php" dir="${dir.build_directory}/instance-${instanceIndex}/dev/tests/functional/" failonerror="true">
            <arg line="utils/generate/page.php"/>
        </exec>

        <exec executable="php" dir="${dir.build_directory}/instance-${instanceIndex}/dev/tests/functional/" failonerror="true">
            <arg line="utils/generate/factory.php"/>
        </exec>

        <antcall target="_run_compiler">
            <param name="product_root_dir" value="${dir.build_directory}/instance-${instanceIndex}" />
        </antcall>

        <antcall target="_run_composer_dump_autoload">
            <param name="target_composer_dir" value="${basedir}/dev/tests/functional"/>
        </antcall>

        <script language="javascript"><![CDATA[
            var currentInstance = project.getProperty('instanceIndex');
            if (currentInstance == 0) {
                self.project.executeTarget( '_install_standalone_application' );
            }
        ]]></script>
    </target>

    <target name="_run_compiler" description="Run DI compiler tool">
        <exec executable="php" failonerror="true" >
            <arg line='-f ${product_root_dir}/dev/tools/Magento/Tools/Di/compiler.php'/>
        </exec>
    </target>

    <target name="_run_composer_dump_autoload" if="env.COMPOSER_HOME">
        <mkdir dir="${env.COMPOSER_HOME}"/>
        <echo message="Run 'composer dump-autoload' for directory '${target_composer_dir}'"/>
        <exec executable="/usr/local/bin/composer" dir="${target_composer_dir}" failonerror="true">
            <env key="COMPOSER_PROCESS_TIMEOUT" value="600"/>
            <arg line="dump-autoload"/>
        </exec>
    </target>

    <target name="_install_standalone_application">
        <exec executable="php" failonerror="true" dir="${dir.build_directory}/instance-${instanceIndex}/dev/tests/functional/config/">
            <arg line="-f standalone-installer.php -- --module-list-file=${env.bamboo_build_module_list_file}"/>
        </exec>
    </target>

    <target name="_import_mysql_dump">
        <exec executable="/usr/bin/mysql" input="${dir.build_directory}/instance-0/dev/tests/functional/config/${env.db_name_prefix}0.sql" failonerror="true">
            <arg value="-u${env.db_user}"/>
            <arg value="-p${env.db_password}"/>
            <arg value="-h${env.db_host}"/>
            <arg value="-D${env.db_name_prefix}${instanceIndex}"/>
        </exec>
    </target>

    <target name="_copy_config_php">
        <copy file="${dir.build_directory}/instance-0/app/etc/config.php" failonerror="true" overwrite="true"
              tofile="${dir.build_directory}/instance-${instanceIndex}/app/etc/config.php"/>
        <replace file="${dir.build_directory}/instance-${instanceIndex}/app/etc/config.php">
            <replacefilter token="${env.db_name_prefix}0" value="${env.db_name_prefix}${instanceIndex}"/>
        </replace>
    </target>

    <target name="_update_db">
        <exec executable="/usr/bin/mysql" failonerror="true">
            <arg value="-u${env.db_user}"/>
            <arg value="-p${env.db_password}"/>
            <arg value="-h${env.db_host}"/>
            <arg value="-D${env.db_name_prefix}${instanceIndex}"/>
            <arg value="-e"/>
            <arg value="UPDATE core_config_data SET value='${env.http_host}${env.build.key}/instance-${instanceIndex}/' WHERE path='web/secure/base_url';
                UPDATE core_config_data SET value='${env.http_host}${env.build.key}/instance-${instanceIndex}/' WHERE path='web/unsecure/base_url';"/>
        </exec>
    </target>
</project>
