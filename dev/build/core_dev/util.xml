<?xml version="1.0" encoding="utf-8"?>
<!--
/**
 * Apache Ant's build file with general-purpose routines common to various CI builds
 *
 * {license_notice}
 *
 * @copyright  {copyright}
 * @license    {license_link}
 */
-->
<project name="Core Development General-Purpose Routines" basedir="../../../" default="_community_edition">
    <property environment="env"/>
    <property name="phpunit" value="phpunit"/>

    <target name="_get_php_version">
        <condition property="input_php_version" value="${env.bamboo_php_version}" else="">
            <isset property="env.bamboo_php_version"/>
        </condition>
        <condition property="php_version" value="${input_php_version}">
            <not><equals arg1="${input_php_version}" arg2="" /></not>
        </condition>		
    </target>

    <target name="_set_php_version" depends="_get_php_version" description="Set php version" if="php_version">
        <exec dir="${basedir}" executable="/opt/bamboo/.phpenv/bin/phpenv" failonerror="true">
            <arg value="local"/>
            <arg value="${php_version}"/>
        </exec>
    </target>

    <target name="_server_info" depends="_set_php_version" description="Output server information">
        <exec executable="php" failonerror="false">
            <arg value="-r"/>
            <arg value="echo 'PHP version: ', PHP_VERSION, PHP_EOL;"/>
        </exec>
    </target>

    <target name="_product_location" description="Detection of a product source code root directory">
        <condition property="product_root_dir" value="${basedir}">
            <not><isset property="product_root_dir"/></not>
        </condition>
    </target>

    <target name="_product_edition_files" depends="_product_location" description="Removal of files, which do not belong to a product edition, excluding internal files">
        <fail unless="product_edition_code" message="Property 'product_edition_code' must be defined"/>
        <exec executable="php" failonerror="true">
            <arg line="-f ${basedir}/dev/build/publication/edition.php --
                --dir=${product_root_dir}
                --edition=${product_edition_code}
                --internal
                "/>
        </exec>
    </target>

    <target name="_product_edition_files_no_internal" depends="_product_location"
            description="Removal of files, which do not belong to a product edition, including internal files">
        <fail unless="product_edition_code" message="Property 'product_edition_code' must be defined"/>
        <exec executable="php" failonerror="true">
            <arg line="-f ${basedir}/dev/build/publication/edition.php --
                --dir=${product_root_dir}
                --edition=${product_edition_code}
                "/>
        </exec>
    </target>


    <target name="_license_replacement" depends="_product_location" description="License notices replacement" if="license_replacement_enabled">
        <fail unless="product_edition_code" message="Property 'product_edition_code' must be defined"/>
        <exec executable="php" failonerror="true">
            <arg line="-f ${basedir}/dev/build/publication/license/license-tool.php --
                -w ${product_root_dir}
                -e ${product_edition_code}
                -v
                "/>
        </exec>
    </target>
    <target name="_product_edition" description="Product edition source code preparation">
        <antcall>
            <target name="_product_edition_files"/>
            <target name="_license_replacement"/>
        </antcall>
    </target>
    <target name="_community_edition" description="Community Edition source code preparation">
        <antcall target="_product_edition">
            <param name="product_edition_code" value="ce"/>
        </antcall>
    </target>
    <target name="_enterprise_edition" description="Enterprise Edition source code preparation">
        <antcall target="_product_edition">
            <param name="product_edition_code" value="ee"/>
        </antcall>
    </target>

    <target name="_product_edition_no_internal" description="Product edition source code preparation (without --additional option)">
        <antcall>
            <target name="_product_edition_files_no_internal"/>
            <target name="_license_replacement"/>
        </antcall>
    </target>

    <target name="_database_credential_substitution" description="Database credentials substitution in configuration file from environment variables">
        <fail unless="db_config_file" message="Property 'db_config_file' must be defined"/>
        <fail unless="env.db_host" message="Environment variable 'db_host' must be defined"/>
        <fail unless="env.db_name" message="Environment variable 'db_name' must be defined"/>
        <fail unless="env.db_user" message="Environment variable 'db_user' must be defined"/>
        <fail unless="env.db_password" message="Environment variable 'db_password' must be defined"/>
        <replace file="${db_config_file}">
            <replacefilter token="{{db_host}}" value="${env.db_host}"/>
            <replacefilter token="{{db_name}}" value="${env.db_name}"/>
            <replacefilter token="{{db_user}}" value="${env.db_user}"/>
            <replacefilter token="{{db_password}}" value="${env.db_password}"/>
        </replace>
    </target>

    <target name="_installation_requirements" depends="_product_location" description="Environment setup for product installation">
        <chmod perm="a+w">
            <dirset dir="${product_root_dir}/app/etc"/>
            <dirset dir="${product_root_dir}/pub/media"/>
            <fileset dir="${product_root_dir}/pub/media"/>
            <dirset dir="${product_root_dir}/pub/static"/>
            <dirset dir="${product_root_dir}/var"/>
        </chmod>
    </target>

    <target name="_code_coverage_configuration" depends="_product_location" description="Code Coverage configuration">
        <fail unless="configuration_file" message="Code coverage configuration variable 'configuration_file' must be defined"/>
        <replace file="${configuration_file}">
            <replacefilter token="{{coverage_dir}}" value="${product_root_dir}"/>
            <replacefilter token="--coverage_html_placeholder" value="-- --&gt;"/>
            <replacefilter token="coverage_html_placeholder--" value="&lt;!-- --"/>
        </replace>
    </target>

    <target name="_code_coverage_configuration_clover_xml" depends="_product_location" description="Code Coverage configuration for clover xml report generation (used by Sonar)">
        <fail unless="configuration_file" message="Code coverage configuration variable 'configuration_file' must be defined"/>
        <replace file="${configuration_file}">
            <replacefilter token="{{coverage_dir}}" value="${product_root_dir}"/>
            <replacefilter token="--coverage_clover_placeholder" value="-- --&gt;"/>
            <replacefilter token="coverage_clover_placeholder--" value="&lt;!-- --"/>
        </replace>
    </target>

    <target name="_drop_database" description="Drops Database" >
        <property name="file.drop_database" location="${product_root_dir}/dev/build/bin/drop-database.sh"/>
        <chmod file="${file.drop_database}" perm="ugo+rx"/>

        <exec executable="${file.drop_database}" failonerror="true">
            <arg value="${env.db_host}"/>
            <arg value="${env.db_name}"/>
            <arg value="${env.db_user}"/>
            <arg value="${env.db_password}"/>
        </exec>
    </target>

    <target name="_create_database" description="Creates Database">
        <property name="file.create_database" location="${product_root_dir}/dev/build/bin/create-database.sh"/>
        <chmod file="${file.create_database}" perm="ugo+rx"/>

        <exec executable="${file.create_database}" failonerror="true">
            <arg value="${env.db_host}"/>
            <arg value="${env.db_name}"/>
            <arg value="${env.db_user}"/>
            <arg value="${env.db_password}"/>
        </exec>
    </target>

</project>
