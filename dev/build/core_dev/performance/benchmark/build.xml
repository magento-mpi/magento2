<?xml version="1.0" encoding="utf-8"?>
<!--
/**
* Apache Ant's build file for core development performance benchmarking
*
* {license_notice}
*
* @copyright  {copyright}
* @license    {license_link}
*/
-->
<project name="Core Development Performance Benchmarking" basedir="." xmlns:ac="antlib:net.sf.antcontrib">
    <property environment="env"/>
    <target name="deploy" depends="cleanup,checkout,install-magento" description="Install Magento on webnode"/>

    <target name="cleanup" depends="_bootstrap" description="Cleanup environment">
        <antcall target="_remote-rmdir">
            <param name="server_ip" value="${env.webnode_initial}"/>
            <param name="directory_path" value="${env.magento_dir}"/>
        </antcall>
        <antcall target="_remote-drop-database"/>
    </target>

    <target name="checkout" depends="_bootstrap" description="Checkout source code to the webnode">
        <antcall target="_remote-git-checkout">
            <param name="server_ip" value="${env.webnode_initial}"/>
        </antcall>
        <antcall target="_composer_install">
            <param name="product_root_dir" value="${env.magento_dir}"/>
            <param name="server_ip" value="${env.webnode_initial}"/>
        </antcall>
    </target>

    <target name="_composer_install" description="Run composer install">
        <sshexec host="${server_ip}"
                 username="${env.webnode_login}"
                 password="${env.webnode_password}"
                 trust="yes"
                 command="cd ${product_root_dir}/setup; composer install;"/>
        <sshexec host="${server_ip}"
                 username="${env.webnode_login}"
                 password="${env.webnode_password}"
                 trust="yes"
                 command="cd ${product_root_dir}; composer install;"/>
    </target>

    <target name="install-clean-magento" depends="_bootstrap,_prepare-magento" description="Install Magento application on remote server">
        <sshexec host="${env.webnode_initial}"
                 username="${env.webnode_login}"
                 password="${env.webnode_password}"
                 trust="yes"
                 command="php -f ${env.magento_dir}/setup/index.php install --language='en_US' --timezone='America/Los_Angeles' --currency='USD' --db_host='${env.mysql_host}' --db_name='${env.mysql_database}' --db_user='${env.mysql_user}' --db_pass='${env.mysql_password}' --use_secure='0' --use_secure_admin='0' --use_rewrites='1' --admin_lastname='Admin' --admin_firstname='Admin' --admin_email='admin@example.com' --admin_use_security_key='0' --base_url='http://${env.base_url}' --base_url_secure='http://${env.secure_base_url}' --backend_frontname='backend' --admin_username='admin' --admin_password='123123q' 2>&amp;1"/>
    </target>

    <target name="install-magento" depends="_bootstrap,_prepare-magento,_remote-create-database" description="Install/Repair Magento Application on defined fixture configuration">

        <condition property="env.size" value="small">
            <not><isset property="env.size"/></not>
        </condition>

        <ac:propertyregex property="git_repository_part" input="${env.git_repository}" regexp="github.corp.ebay.com\/(.+)" select="\1" casesensitive="false" />
        <ac:propertyregex property="git_repository" input="${git_repository_part}" regexp="\/" replace="-" casesensitive="false" />

        <antcall target="install-clean-magento"/>

        <sshexec host="${env.webnode_initial}"
                 username="${env.webnode_login}"
                 password="${env.webnode_password}"
                 trust="yes"
                 command="cd ${env.magento_dir}/dev/tools/performance-toolkit/fixtures/; cp tax_rates.csv temp.csv; head -5 temp.csv > tax_rates.csv;"/>

        <sshexec host="${env.webnode_initial}"
                 username="${env.webnode_login}"
                 password="${env.webnode_password}"
                 trust="yes"
                 command="php -f ${env.magento_dir}/dev/tools/performance-toolkit/generate.php -- --profile=${env.magento_dir}/dev/tools/performance-toolkit/profiles/${env.size}.xml"/>
    </target>

    <target name="_bootstrap" description="Check whether common parameters is set">
        <fail unless="env.webnode_initial" message="Variable 'webnode_initial' must be defined"/>
        <fail unless="env.webnode_login" message="Variable 'webnode_login' must be defined"/>
        <fail unless="env.webnode_password" message="Variable 'webnode_password' must be defined"/>
        <fail unless="env.magento_dir" message="Variable 'magento_dir' must be defined"/>
    </target>

    <target name="_prepare-magento" description="Prepare Magento for installation">
        <antcall target="_remote-code-prepare">
            <param name="server_ip" value="${env.webnode_initial}"/>
        </antcall>
    </target>

    <target name="_remote-code-prepare" description="Set permissions for magento directories and files on remote machine">
        <sshexec host="${server_ip}"
                 username="${env.webnode_login}"
                 password="${env.webnode_password}"
                 trust="yes"
                 command="chmod a+w -R ${env.magento_dir}/app/etc ${env.magento_dir}/pub/media ${env.magento_dir}/pub/static ${env.magento_dir}/var"/>
    </target>

    <target name="_remote-git-checkout" description="Checkout specified git repository branch on remote machine">
        <fail unless="env.git_repository" message="Variable 'git_repository' must be defined"/>
        <fail unless="env.git_token" message="Variable 'git_token' must be defined"/>
        <fail unless="env.git_branch" message="Variable 'git_branch' must be defined"/>

        <ac:propertyregex property="git_repository_part" input="${env.git_repository}" regexp="https:\/\/(.+)" select="\1" casesensitive="false" />
        <echo message="Checking out: ${env.git_repository} : ${env.git_branch}"/>
        <echo message="Repository part value: ${git_repository_part}"/>
        <sshexec host="${server_ip}"
                 username="${env.webnode_login}"
                 password="${env.webnode_password}"
                 trust="yes"
                 command="git clone -b ${env.git_branch} https://${env.git_token}@${git_repository_part} ${env.magento_dir}"/>
    </target>

    <target name="_remote-rmdir" description="Delete specified directory recursively">
        <fail unless="directory_path" message="Variable 'directory_path' must be defined"/>
        <sshexec host="${server_ip}"
                 username="${env.webnode_login}"
                 password="${env.webnode_password}"
                 trust="yes"
                 command="rm -rf ${directory_path}"/>
    </target>

    <target name="_remote-drop-database" depends="_database-credentials-check" description="Drop specified MySQL database">
        <sshexec host="${env.mysql_host}"
                 username="${env.webnode_login}"
                 password="${env.webnode_password}"
                 trust="yes"
                 command="mysql -u${env.mysql_user} -p${env.mysql_password} -e 'DROP DATABASE IF EXISTS ${env.mysql_database};'"/>
    </target>

    <target name="_remote-create-database" depends="_database-credentials-check" description="Create specified MySQL database">
        <sshexec host="${env.mysql_host}"
                 username="${env.webnode_login}"
                 password="${env.webnode_password}"
                 trust="yes"
                 command="mysql -u${env.mysql_user} -p${env.mysql_password} -e 'CREATE DATABASE ${env.mysql_database};'"/>
    </target>

    <target name="_database-credentials-check" description="Check whether common database parameters is set">
        <fail unless="env.mysql_host" message="Variable 'mysql_host' must be defined"/>
        <fail unless="env.mysql_user" message="Variable 'mysql_user' must be defined"/>
        <fail unless="env.mysql_password" message="Variable 'mysql_password' must be defined"/>
        <fail unless="env.mysql_database" message="Variable 'mysql_database' must be defined"/>
    </target>

    <target name="compare-reports" description="Compare jMeter Reports">
        <exec executable="php">
            <arg value="-f"/>
            <arg value="${env.bamboo_build_working_directory}/team/dev/tests/performance/compare_reports.php"/>
            <arg value="--"/>
            <arg value="-m"/>
            <arg value="${env.bamboo_build_working_directory}/mainline/dev/tests/performance/report/${env.bamboo_buildResultKey}_response_time.jtl"/>
            <arg value="-b"/>
            <arg value="${env.bamboo_build_working_directory}/team/dev/tests/performance/report/${env.bamboo_buildResultKey}_response_time.jtl"/>
            <arg value="-o"/>
            <arg value="${env.bamboo_build_working_directory}/team/dev/tests/performance/report/${env.bamboo_buildResultKey}_response_time_summary.jtl"/>
            <arg value="-p"/>
            <arg value="${env.skip_percents}"/>
        </exec>
    </target>

    <target name="check-mainline-head-presense" description="Check is mainline HEAD revision present in team branch">
        <exec executable="sh" failonerror="true">
            <arg value="-c"/>
            <arg value="cd ${env.bamboo_build_working_directory}/mainline; last_commit=$(git rev-parse HEAD); cd ${env.bamboo_build_working_directory}/team;  git branch --contains=$last_commit | grep '*';" />
        </exec>
    </target>
</project>
