<?php
/**
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */

namespace Magento\SalesRule\Model\Resource\Rule;

/**
 * @magentoDataFixture Magento/SalesRule/_files/rules.php
 * @magentoDataFixture Magento/SalesRule/_files/coupons.php
 */
class CollectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider setValidationFilterDataProvider()
     * @param string $couponCode
     * @param array $expectedItems
     */
    public function testSetValidationFilter($couponCode, $expectedItems)
    {
        $this->_collection = \Magento\TestFramework\Helper\Bootstrap::getObjectManager()
            ->create('Magento\SalesRule\Model\Resource\Rule\Collection');
        $items = array_values($this->_collection->setValidationFilter(1, 0, $couponCode)->getItems());

        $ids = array();
        foreach ($items as $key => $item) {
            $this->assertEquals($item->getName(), $expectedItems[$key]);
            if (in_array($item->getId(), $ids)) {
                $this->fail('Item should be unique in result collection');
            }
            $ids[] = $item->getId();
        }
    }

    public function setValidationFilterDataProvider()
    {
        return array(
            'Check type COUPON' => array('coupon_code', array('#1', '#2', '#5')),
            'Check type NO_COUPON' => array('', array('#2', '#5')),
            'Check type COUPON_AUTO' => array('coupon_code_auto', array('#2', '#4', '#5')),
            'Check result with auto generated coupon' => array('autogenerated_3_1', array('#2', '#3', '#5')),
            'Check result with non actual previously generated coupon' => array('autogenerated_2_1', array('#2', '#5')),
            'Check result with wrong code' => array('wrong_code', array('#2', '#5')),
        );
    }
}
